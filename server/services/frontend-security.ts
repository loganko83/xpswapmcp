/**
 * XPSwap Frontend Security Enhancement
 * Phase 3.1: Content Security Policy (CSP) Implementation
 * 
 * ÌîÑÎ°†Ìä∏ÏóîÎìú Î≥¥ÏïàÏùÑ ÏúÑÌïú CSP Ï†ïÏ±Ö Î∞è Î≥¥Ïïà Ìó§Îçî Í¥ÄÎ¶¨
 */

interface CSPDirective {
  name: string;
  values: string[];
  description: string;
}

interface SecurityConfig {
  csp: {
    directives: CSPDirective[];
    reportOnly: boolean;
    reportUri?: string;
  };
  headers: {
    [key: string]: string;
  };
  features: {
    strictTransportSecurity: boolean;
    contentTypeOptions: boolean;
    frameOptions: boolean;
    xssProtection: boolean;
    referrerPolicy: boolean;
  };
}

class FrontendSecurityManager {
  private config: SecurityConfig;
  private isProduction: boolean;

  constructor(isProduction: boolean = false) {
    this.isProduction = isProduction;
    this.config = this.generateSecurityConfig();
  }

  /**
   * Î≥¥Ïïà ÏÑ§Ï†ï ÏÉùÏÑ±
   */
  private generateSecurityConfig(): SecurityConfig {
    const baseConfig: SecurityConfig = {
      csp: {
        reportOnly: !this.isProduction,
        directives: [
          {
            name: 'default-src',
            values: ["'self'"],
            description: 'Í∏∞Î≥∏ Î¶¨ÏÜåÏä§ ÏÜåÏä§ Ï†úÌïú'
          },
          {
            name: 'script-src',
            values: [
              "'self'",
              "'unsafe-inline'", // React Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÌïÑÏöî
              'https://cdn.jsdelivr.net', // Chart.js Îì± CDN
              'https://unpkg.com', // Í∞úÎ∞úÏö© CDN
              ...(this.isProduction ? [] : ["'unsafe-eval'"]) // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå ÌóàÏö©
            ],
            description: 'Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÜåÏä§ Ï†úÌïú'
          },
          {
            name: 'style-src',
            values: [
              "'self'",
              "'unsafe-inline'", // Tailwind CSS inline styles
              'https://fonts.googleapis.com',
              'https://cdn.jsdelivr.net'
            ],
            description: 'Ïä§ÌÉÄÏùº ÏãúÌä∏ ÏÜåÏä§ Ï†úÌïú'
          },
          {
            name: 'font-src',
            values: [
              "'self'",
              'https://fonts.gstatic.com',
              'data:'
            ],
            description: 'Ìè∞Ìä∏ ÏÜåÏä§ Ï†úÌïú'
          },
          {
            name: 'img-src',
            values: [
              "'self'",
              'data:',
              'https:',
              'https://assets.coingecko.com', // ÏïîÌò∏ÌôîÌèê Ïù¥ÎØ∏ÏßÄ
              'https://cryptologos.cc', // ÌÜ†ÌÅ∞ Î°úÍ≥†
              'https://raw.githubusercontent.com' // GitHub Ïù¥ÎØ∏ÏßÄ
            ],
            description: 'Ïù¥ÎØ∏ÏßÄ ÏÜåÏä§ Ï†úÌïú'
          },
          {
            name: 'connect-src',
            values: [
              "'self'",
              'https://www.ankr.com', // Xphere RPC
              'https://api.coingecko.com', // Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞
              'https://api.coinmarketcap.com', // ÏãúÏû• Îç∞Ïù¥ÌÑ∞
              'wss://www.ankr.com', // WebSocket connections
              'ws://localhost:*', // Í∞úÎ∞ú ÌôòÍ≤Ω WebSocket
              'https://li.quest', // Li.Fi bridge
              ...(this.isProduction ? [] : ['ws://localhost:*', 'http://localhost:*'])
            ],
            description: 'AJAX, WebSocket Îì± Ïó∞Í≤∞ Ï†úÌïú'
          },
          {
            name: 'frame-src',
            values: ["'none'"],
            description: 'iframe ÏÇ¨Ïö© Í∏àÏßÄ'
          },
          {
            name: 'object-src',
            values: ["'none'"],
            description: 'object, embed ÌÉúÍ∑∏ ÏÇ¨Ïö© Í∏àÏßÄ'
          },
          {
            name: 'base-uri',
            values: ["'self'"],
            description: 'base ÌÉúÍ∑∏ URI Ï†úÌïú'
          },
          {
            name: 'form-action',
            values: ["'self'"],
            description: 'form action Ï†úÌïú'
          },
          {
            name: 'frame-ancestors',
            values: ["'self'"],
            description: 'ÏÉÅÏúÑ ÌîÑÎ†àÏûÑ Ï†úÌïú'
          },
          {
            name: 'script-src-attr',
            values: ["'none'"],
            description: 'Ïù∏ÎùºÏù∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ Í∏àÏßÄ'
          }
        ]
      },
      headers: {
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'SAMEORIGIN',
        'X-XSS-Protection': '1; mode=block',
        'Referrer-Policy': 'strict-origin-when-cross-origin',
        'Cross-Origin-Opener-Policy': 'same-origin',
        'Cross-Origin-Resource-Policy': 'same-origin',
        'Cross-Origin-Embedder-Policy': 'require-corp',
        'Origin-Agent-Cluster': '?1'
      },
      features: {
        strictTransportSecurity: this.isProduction,
        contentTypeOptions: true,
        frameOptions: true,
        xssProtection: true,
        referrerPolicy: true
      }
    };

    return baseConfig;
  }

  /**
   * CSP Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
   */
  generateCSPString(): string {
    const directives = this.config.csp.directives
      .map(directive => `${directive.name} ${directive.values.join(' ')}`)
      .join('; ');
    
    return directives;
  }

  /**
   * Express ÎØ∏Îì§Ïõ®Ïñ¥ ÏÉùÏÑ±
   */
  getExpressMiddleware() {
    return (req: any, res: any, next: any) => {
      // CSP Ìó§Îçî ÏÑ§Ï†ï
      const cspHeaderName = this.config.csp.reportOnly 
        ? 'Content-Security-Policy-Report-Only' 
        : 'Content-Security-Policy';
      
      res.setHeader(cspHeaderName, this.generateCSPString());

      // Ï∂îÍ∞Ä Î≥¥Ïïà Ìó§Îçî ÏÑ§Ï†ï
      Object.entries(this.config.headers).forEach(([name, value]) => {
        if (name === 'Strict-Transport-Security' && !this.config.features.strictTransportSecurity) {
          return; // HTTPSÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ HSTS Ìó§Îçî Ï†úÏô∏
        }
        res.setHeader(name, value);
      });

      // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú Ï∂îÍ∞Ä Ìó§Îçî
      if (!this.isProduction) {
        res.setHeader('X-Development-Mode', 'true');
      }

      next();
    };
  }

  /**
   * CSP ÏúÑÎ∞ò Î¶¨Ìè¨Ìä∏ Ìï∏Îì§Îü¨
   */
  getCSPReportHandler() {
    return (req: any, res: any) => {
      const report = req.body;
      
      console.warn('üö® CSP Violation Report:', {
        'blocked-uri': report['blocked-uri'],
        'document-uri': report['document-uri'],
        'violated-directive': report['violated-directive'],
        'original-policy': report['original-policy'],
        timestamp: new Date().toISOString()
      });

      // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎäî Î°úÍ∑∏ ÏãúÏä§ÌÖúÏóê Í∏∞Î°ù
      if (this.isProduction) {
        this.logCSPViolation(report);
      }

      res.status(204).end();
    };
  }

  /**
   * CSP ÏúÑÎ∞ò Î°úÍ∑∏ Í∏∞Î°ù
   */
  private logCSPViolation(report: any) {
    // TODO: Ïã§Ï†ú Î°úÍ∑∏ ÏãúÏä§ÌÖúÍ≥º Ïó∞Îèô
    console.log('CSP Violation logged:', report);
  }

  /**
   * Î≥¥Ïïà ÏÑ§Ï†ï ÏÉÅÌÉú Î∞òÌôò
   */
  getSecurityStatus() {
    return {
      csp: {
        enabled: true,
        reportOnly: this.config.csp.reportOnly,
        directiveCount: this.config.csp.directives.length
      },
      headers: {
        count: Object.keys(this.config.headers).length,
        hsts: this.config.features.strictTransportSecurity
      },
      environment: this.isProduction ? 'production' : 'development'
    };
  }

  /**
   * ÌóàÏö©Îêú ÎèÑÎ©îÏù∏ Ï∂îÍ∞Ä (Îü∞ÌÉÄÏûÑ)
   */
  addAllowedDomain(directive: string, domain: string) {
    const dir = this.config.csp.directives.find(d => d.name === directive);
    if (dir && !dir.values.includes(domain)) {
      dir.values.push(domain);
      console.log(`‚úÖ Added ${domain} to ${directive} directive`);
    }
  }

  /**
   * Î≥¥Ïïà ÏÑ§Ï†ï Í≤ÄÏ¶ù
   */
  validateConfiguration(): { valid: boolean; issues: string[] } {
    const issues: string[] = [];

    // ÌïÑÏàò ÏßÄÏãúÏñ¥ ÌôïÏù∏
    const requiredDirectives = ['default-src', 'script-src', 'style-src'];
    requiredDirectives.forEach(directive => {
      if (!this.config.csp.directives.find(d => d.name === directive)) {
        issues.push(`Missing required CSP directive: ${directive}`);
      }
    });

    // ÏúÑÌóòÌïú ÏÑ§Ï†ï ÌôïÏù∏
    const scriptSrc = this.config.csp.directives.find(d => d.name === 'script-src');
    if (scriptSrc) {
      if (scriptSrc.values.includes("'unsafe-eval'") && this.isProduction) {
        issues.push("'unsafe-eval' should not be used in production");
      }
      if (scriptSrc.values.includes("'unsafe-inline'") && this.isProduction) {
        console.warn("‚ö†Ô∏è 'unsafe-inline' in script-src may be risky in production");
      }
    }

    return {
      valid: issues.length === 0,
      issues
    };
  }
}

export default FrontendSecurityManager;