#!/usr/bin/env node

import Database from 'better-sqlite3';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const dbPath = path.join(__dirname, '..', 'test.db');

console.log('üîç Checking database schema...');
console.log(`üìÅ Database path: ${dbPath}`);

try {
  const db = new Database(dbPath);
  
  // Î™®Îì† ÌÖåÏù¥Î∏î Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  const tables = db.prepare(`
    SELECT name FROM sqlite_master 
    WHERE type='table' AND name NOT LIKE 'sqlite_%'
    ORDER BY name
  `).all();
  
  console.log('\nüìã Tables found:');
  tables.forEach(table => {
    console.log(`  - ${table.name}`);
  });
  
  // Í∞Å ÌÖåÏù¥Î∏îÏùò Ïä§ÌÇ§Îßà ÌôïÏù∏
  for (const table of tables) {
    console.log(`\nüîß Schema for ${table.name}:`);
    const schema = db.prepare(`PRAGMA table_info(${table.name})`).all();
    schema.forEach(column => {
      console.log(`  ${column.name}: ${column.type} ${column.notnull ? 'NOT NULL' : ''} ${column.pk ? 'PRIMARY KEY' : ''}`);
    });
  }
  
  // Ïù∏Îç±Ïä§ ÌôïÏù∏
  console.log('\nüìä Existing indexes:');
  const indexes = db.prepare(`
    SELECT name, tbl_name FROM sqlite_master 
    WHERE type='index' AND name NOT LIKE 'sqlite_%'
    ORDER BY name
  `).all();
  
  indexes.forEach(index => {
    console.log(`  - ${index.name} on ${index.tbl_name}`);
  });
  
  db.close();
  console.log('\n‚úÖ Schema check completed!');
  
} catch (error) {
  console.error('‚ùå Schema check failed:', error.message);
  process.exit(1);
}
